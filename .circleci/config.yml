version: 2.1

orbs: 

  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_name:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name "udapeople-backend-<<parameters.stack_name>>"
      - run:
          name: Destroy frontend environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.stack_name>> --recursive
            aws cloudformation delete-stack \
            --stack-name "udapeople-frontend-<<parameters.stack_name>>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure  https://kvdb.io/GcrTkgswKvZRWyCchJ6zXw/migration_<<parameters.Workflow_ID>>)
            if [[ $"SUCCESS" -eq "1" ]]; 
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: 
            - backend
          key: backend-build
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: FrontEnd Test
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Test
          command: |
            cd backend
            npm run test
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  scan-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name : Frontend security analysis
          command : |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  scan-backend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name : Backend security analysis
          command : |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli 
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              export OldBackendIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              mkdir -p /tmp/workspace
              echo "export OldBackendIP=\"$OldBackendIP\"">> /tmp/workspace/env_vars
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text  | head -1  >> ~/project/.circleci/ansible/inventory.txt
        - run:
            name: Install tar utility to fix persist_to_workspace issue
            command: |
              yum install -y tar gzip
        - run:
            name: log back-end public ip
            command: |
              cat ~/project/.circleci/ansible/inventory.txt
        - save_cache:
            paths: [/tmp/workspace/env_vars]
            key: oldip_env_vars
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment 

  configure-infrastructure:
    docker:
      - image : alpinelinux/ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["83:d3:fd:5b:5a:56:60:5f:0d:52:ef:77:17:7d:f4:54"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI
          command: |
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Install AWS CLI
          command: |
            sudo apt upgrade \
            && sudo apt update \
            && sudo apt install unzip \
            && sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
            && sudo unzip awscliv2.zip \
            && sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/GcrTkgswKvZRWyCchJ6zXw/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [oldip_env_vars]
      - run:
          name: Install dependencies
          command: |
            sudo apt upgrade \
            && sudo apt update \
            && sudo apt install unzip \
            && sudo apt install tar \
            && sudo apt install curl \
            && sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
            && sudo unzip awscliv2.zip \
            && sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - run:
          name: Get backend url
          command: |
            source /tmp/workspace/env_vars
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text  | head -1 )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Send frontend url to kvdb
          command: |
            curl -k https://kvdb.io/GcrTkgswKvZRWyCchJ6zXw/undmhossniurlfe  -d s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image : circleci/python:latest
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - add_ssh_keys:
          fingerprints: ["83:d3:fd:5b:5a:56:60:5f:0d:52:ef:77:17:7d:f4:54"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI
          command: |
            sudo apt upgrade \
            && sudo apt update \
            && sudo apt install unzip \
            && sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
            && sudo unzip awscliv2.zip \
            && sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - run: 
          name: Install dependencies
          command: |
             sudo apt install ansible
             sudo apt install npm
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd backend 
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls -ltr
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - restore_cache:
          keys: [oldip_env_vars]
      - run:
          name: Install dependencies 
          command: |
            apk add --update curl
            apk add --no-cache aws-cli
      - run:
          name: Backend smoke test.
          command: |
            source /tmp/workspace/env_vars 
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text | head -1 )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Update cloudfront distribution
            command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              mkdir -p /tmp/workspace
              echo "export OldWorkflowID=\"$OldWorkflowID\"">> /tmp/workspace/env_vars
              curl -k https://kvdb.io/GcrTkgswKvZRWyCchJ6zXw/oldworkflow -d ${OldWorkflowID}
              echo OldWorkflowID: "${OldWorkflowID}"
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
        - save_cache:
            paths: [/tmp/workspace/env_vars]
            key: env_vars
  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: install pre requesisets 
            command: |
              yum install -y tar gzip
        - restore_cache:
            keys:
              - env_vars
        - run:
            name: Get old stack workflow id
            command: | 
              source /tmp/workspace/env_vars
              OldWorkflowID=$(curl --insecure  https://kvdb.io/GcrTkgswKvZRWyCchJ6zXw/oldworkflow)
              echo "old :"
              echo ${OldWorkflowID}
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"    
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${OldWorkflowID}" =~ "${STACKS[@]}" ]]
              then
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-"${OldWorkflowID}
                aws cloudformation delete-stack --stack-name "udapeople-frontend-"${OldWorkflowID}
              fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure    
      - deploy-frontend:
          requires: 
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations 
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires: 
            - smoke-test
      - cleanup:
          requires: 
            - cloudfront-update