version: 2.1

orbs: 

  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_name:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name "udapeople-backend-<<parameters.stack_name>>"
      - run:
          name: Destroy frontend environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.stack_name>> --recursive
            aws cloudformation delete-stack \
            --stack-name "udapeople-frontend-<<parameters.stack_name>>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure  https://kvdb.io/GcrTkgswKvZRWyCchJ6zXw/migration_<<parameters.Workflow_ID>>)
            if [[ $"SUCCESS" -eq "1" ]]; 
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: 
            - backend
          key: backend-build
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: FrontEnd Test
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Test
          command: |
            cd backend
            npm run test
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  scan-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name : Frontend security analysis
          command : |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  scan-backend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name : Backend security analysis
          command : |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@general'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
